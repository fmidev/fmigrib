#
# SConscript for himan-lib

import os
import platform
import sys

OS_NAME = platform.linux_distribution()[0]
OS_VERSION = float('.'.join(platform.linux_distribution()[1].split('.')[:2]))

IS_RHEL = False

if OS_NAME == "Red Hat Enterprise Linux Server" or OS_NAME == "CentOS":
	IS_RHEL=True

AddOption(
    '--debug-build',
    dest='debug-build',
    action='store_true',
    help='debug build',
    default=False)

env = Environment()

# Check build

DEBUG = GetOption('debug-build')
RELEASE = (not DEBUG)

# Workspace

workspace = os.getcwd() + "/../"

# cuda toolkit path

cuda_toolkit_path = '/usr/local/cuda-8.0'

if os.environ.get('CUDA_TOOLKIT_PATH') is None:
        print "Environment variable CUDA_TOOLKIT_PATH not set, assuming " + cuda_toolkit_path
else:
        cuda_toolkit_path = os.environ['CUDA_TOOLKIT_PATH']

have_cuda = False

if os.path.isfile(cuda_toolkit_path + '/lib64/libcudart.so'):
        have_cuda = True

if os.environ.get('CC') != None:
        env['CC'] = os.environ.get('CC')
else:
	env['CC'] = 'gcc'

if os.environ.get('CXX') != None:
        env['CXX'] = os.environ.get('CXX')
else:
	env['CXX'] = 'g++'

# Includes

includes = []

includes.append('../../../include')

if have_cuda:
	includes.append(cuda_toolkit_path + '/include')

env.Append(CPPPATH = includes)

# Library paths

librarypaths = []

if have_cuda:
	librarypaths.append(cuda_toolkit_path + '/lib64')

if DEBUG:
	librarypaths.append('../../../build/debug')
else:
	librarypaths.append('../../../build/release')

env.Append(LIBPATH = librarypaths)

# Libraries

env.Append(LIBS = [ 'dl', 'rt'])

if not DEBUG:
	env.Append(LIBS=env.File('../build/release/libfmigrib.a'))

else:
	env.Append(LIBS=env.File('../build/debug/libfmigrib.a'))

env.Append(LIBS=['eccodes', 'pthread'])

if have_cuda:
	env.Append(LIBS = ['cudart'])

env.Append(LIBS = ['boost_unit_test_framework', 'boost_iostreams', 'boost_filesystem', 'boost_system'])

# CFLAGS

# "Normal" flags

cflags_normal = []
cflags_normal.append('-Wall')
cflags_normal.append('-W')
cflags_normal.append('-Wno-unused-parameter')
cflags_normal.append('-Werror')

# Extra flags

cflags_extra = []
cflags_extra.append('-Wpointer-arith')
cflags_extra.append('-Wcast-qual')
cflags_extra.append('-Wcast-align')
cflags_extra.append('-Wwrite-strings')
cflags_extra.append('-Wconversion')
cflags_extra.append('-Winline')
cflags_extra.append('-Wnon-virtual-dtor')
cflags_extra.append('-Wno-pmf-conversions')
cflags_extra.append('-Wsign-promo')
cflags_extra.append('-Wchar-subscripts')
cflags_extra.append('-Wold-style-cast')

# Difficult flags

cflags_difficult = []
cflags_difficult.append('-pedantic')
cflags_difficult.append('-Weffc++')
cflags_difficult.append('-Wredundant-decls')
cflags_difficult.append('-Wshadow')
cflags_difficult.append('-Woverloaded-virtual')
cflags_difficult.append('-Wunreachable-code')
cflags_difficult.append('-Wctor-dtor-privacy')

# Default flags (common for release/debug)

cflags = []

if not IS_RHEL or (IS_RHEL and OS_VERSION >= 7.0):
	cflags.append('-std=c++0x')
else:
	cflags.append('-std=c++0x')

cflags.append('-pthread')
env.Append(CCFLAGS = cflags)
env.Append(CCFLAGS = cflags_normal)

# Linker flags

#env.Append(LINKFLAGS = ['-rdynamic','-Wl,--as-needed'])

# Defines

env.Append(CPPDEFINES=['UNIX'])

if have_cuda:
	env.Append(CPPDEFINES=['HAVE_CUDA'])
	
if IS_RHEL and OS_VERSION >= 7.0:
	env.Append(NVCCFLAGS = ['-std=c++11'])

env.Append(NVCCPATH = ['./include'])
env.Append(NVCCPATH = [workspace + '/himan-plugins/include']) # cuda-helper

# Other

env.Append(LINKFLAGS = ['-pthread'])

build_dir = ""

if RELEASE:
	env.Append(CCFLAGS = ['-O2'])
	env.Append(CPPDEFINES = ['NDEBUG'])
	build_dir = 'build/release'

if DEBUG:
	env.Append(CCFLAGS = ['-g','-O0'])
	env.Append(CCFLAGS = cflags_extra)
	#env.Append(CCFLAGS = cflags_difficult)
	env.Append(CPPDEFINES = ['DEBUG'])

	# Cuda
	env.Append(NVCCFLAGS = ['-O0','-g','-G', '-lineinfo'])
	env.Append(NVCCDEFINES = ['DEBUG'])

	build_dir = 'build/debug'

SConscript('SConscript', exports = ['env'], variant_dir=build_dir, duplicate=0)
Clean('.', build_dir)
